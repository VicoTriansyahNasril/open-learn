generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  xp        Int      @default(0)
  level     Int      @default(1)
  progress  LessonProgress[]
  badges    UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  level       String
  category    String
  publishedAt DateTime?
  imageUrl    String?

  modules     Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([courseId, order])
}

model Lesson {
  id       String   @id @default(cuid())
  title    String
  order    Int
  content  String?  @db.Text
  moduleId String
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress LessonProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([moduleId, order])
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())
  @@unique([userId, lessonId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String

  users       UserBadge[]

  createdAt DateTime @default(now())
}

model UserBadge {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId     String
  badge       Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  earnedAt    DateTime @default(now())

  @@unique([userId, badgeId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

model Question {
  id          String       @id @default(cuid())
  text        String       @db.Text
  type        QuestionType
  difficulty  String       @default("medium")

  options     Option[]
  quizItems   QuizItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

enum QuizMode {
  ASSIGNED
  LIVE
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  mode        QuizMode
  timeLimit   Int?
  
  items       QuizItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model QuizItem {
  id          String   @id @default(cuid())
  
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  order       Int      // Urutan soal dalam kuis

  @@unique([quizId, questionId])
  @@unique([quizId, order])
}